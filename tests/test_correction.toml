# Test error correction
#

code = '''
#include "ramrsbd.h"
'''

defines.CODE_SIZE = [16, 64, 128]
defines.ECC_SIZE = [4, 32]
defines.ERASE_SIZE = 4096
if = 'ECC_SIZE < CODE_SIZE'

defines.READ_SIZE = 'CODE_SIZE - ECC_SIZE'
defines.PROG_SIZE = 'CODE_SIZE - ECC_SIZE'
defines.BLOCK_SIZE = 'ERASE_SIZE - ((ERASE_SIZE/CODE_SIZE)*ECC_SIZE)'

# test all 1-bit errors
[cases.test_correction_1_bit_all]
code = '''
    ramrsbd_t ramrsbd;
    struct lfs_config cfg_ = *cfg;
    cfg_.context = &ramrsbd;
    cfg_.read  = ramrsbd_read;
    cfg_.prog  = ramrsbd_prog;
    cfg_.erase = ramrsbd_erase;
    cfg_.sync  = ramrsbd_sync;
    struct ramrsbd_config ramrsbdcfg = {
        .code_size = CODE_SIZE,
        .ecc_size = ECC_SIZE,
        .erase_size = ERASE_SIZE,
        .erase_count = ERASE_COUNT,
    };
    ramrsbd_create(&cfg_, &ramrsbdcfg) => 0;

    uint8_t buffer[READ_SIZE];

    // write data
    cfg_.erase(&cfg_, 0) => 0;
    for (lfs_off_t i = 0; i < READ_SIZE; i++) {
        buffer[i] = 'a' + (i % 26);
    }
    cfg_.prog(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

    // try flipping each bit
    for (lfs_off_t i = 0; i < 8*CODE_SIZE; i++) {
        ramrsbd.buffer[i/8] ^= 1 << (i%8);

        // read data
        cfg_.read(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

        // error correction should repair the bit
        for (lfs_off_t i = 0; i < READ_SIZE; i++) {
            LFS_ASSERT(buffer[i] == 'a' + (i % 26));
        }

        // undo the bit flip
        ramrsbd.buffer[i/8] ^= 1 << (i%8);
    }

    ramrsbd_destroy(&cfg_) => 0;
'''

# test all 1-byte errors
[cases.test_correction_1_byte_all]
code = '''
    ramrsbd_t ramrsbd;
    struct lfs_config cfg_ = *cfg;
    cfg_.context = &ramrsbd;
    cfg_.read  = ramrsbd_read;
    cfg_.prog  = ramrsbd_prog;
    cfg_.erase = ramrsbd_erase;
    cfg_.sync  = ramrsbd_sync;
    struct ramrsbd_config ramrsbdcfg = {
        .code_size = CODE_SIZE,
        .ecc_size = ECC_SIZE,
        .erase_size = ERASE_SIZE,
        .erase_count = ERASE_COUNT,
    };
    ramrsbd_create(&cfg_, &ramrsbdcfg) => 0;

    uint8_t buffer[READ_SIZE];

    // write data
    cfg_.erase(&cfg_, 0) => 0;
    for (lfs_off_t i = 0; i < READ_SIZE; i++) {
        buffer[i] = 'a' + (i % 26);
    }
    cfg_.prog(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

    // try flipping each byte
    for (lfs_off_t i = 0; i < CODE_SIZE; i++) {
        ramrsbd.buffer[i] ^= 0xff;

        // read data
        cfg_.read(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

        // error correction should repair the bit
        for (lfs_off_t i = 0; i < READ_SIZE; i++) {
            LFS_ASSERT(buffer[i] == 'a' + (i % 26));
        }

        // undo the byte flip
        ramrsbd.buffer[i] ^= 0xff;
    }

    ramrsbd_destroy(&cfg_) => 0;
'''

# test random 2 bit errors
[cases.test_correction_2_bits_prng]
defines.SEED = 'range(10)'
defines.N = 1000
code = '''
    ramrsbd_t ramrsbd;
    struct lfs_config cfg_ = *cfg;
    cfg_.context = &ramrsbd;
    cfg_.read  = ramrsbd_read;
    cfg_.prog  = ramrsbd_prog;
    cfg_.erase = ramrsbd_erase;
    cfg_.sync  = ramrsbd_sync;
    struct ramrsbd_config ramrsbdcfg = {
        .code_size = CODE_SIZE,
        .ecc_size = ECC_SIZE,
        .erase_size = ERASE_SIZE,
        .erase_count = ERASE_COUNT,
    };
    ramrsbd_create(&cfg_, &ramrsbdcfg) => 0;

    uint8_t buffer[READ_SIZE];

    // write data
    cfg_.erase(&cfg_, 0) => 0;
    for (lfs_off_t i = 0; i < READ_SIZE; i++) {
        buffer[i] = 'a' + (i % 26);
    }
    cfg_.prog(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

    // try flipping random sets of bits
    uint32_t prng = SEED;
    for (lfs_size_t i = 0; i < N; i++) {
        lfs_size_t bit0 = TEST_PRNG(&prng) % (8*CODE_SIZE);
        lfs_size_t bit1 = TEST_PRNG(&prng) % (8*CODE_SIZE);
        ramrsbd.buffer[bit0/8] ^= 1 << (bit0%8);
        ramrsbd.buffer[bit1/8] ^= 1 << (bit1%8);

        // read data
        cfg_.read(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

        // error correction should repair the bit
        for (lfs_off_t i = 0; i < READ_SIZE; i++) {
            LFS_ASSERT(buffer[i] == 'a' + (i % 26));
        }

        // undo the bit flips
        ramrsbd.buffer[bit0/8] ^= 1 << (bit0%8);
        ramrsbd.buffer[bit1/8] ^= 1 << (bit1%8);
    }

    ramrsbd_destroy(&cfg_) => 0;
'''

# test random 2 byte errors
[cases.test_correction_2_bytes_prng]
defines.SEED = 'range(10)'
defines.N = 1000
code = '''
    ramrsbd_t ramrsbd;
    struct lfs_config cfg_ = *cfg;
    cfg_.context = &ramrsbd;
    cfg_.read  = ramrsbd_read;
    cfg_.prog  = ramrsbd_prog;
    cfg_.erase = ramrsbd_erase;
    cfg_.sync  = ramrsbd_sync;
    struct ramrsbd_config ramrsbdcfg = {
        .code_size = CODE_SIZE,
        .ecc_size = ECC_SIZE,
        .erase_size = ERASE_SIZE,
        .erase_count = ERASE_COUNT,
    };
    ramrsbd_create(&cfg_, &ramrsbdcfg) => 0;

    uint8_t buffer[READ_SIZE];

    // write data
    cfg_.erase(&cfg_, 0) => 0;
    for (lfs_off_t i = 0; i < READ_SIZE; i++) {
        buffer[i] = 'a' + (i % 26);
    }
    cfg_.prog(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

    // try flipping random sets of bytes
    uint32_t prng = SEED;
    for (lfs_size_t i = 0; i < N; i++) {
        lfs_size_t byte0 = TEST_PRNG(&prng) % CODE_SIZE;
        lfs_size_t byte1 = TEST_PRNG(&prng) % CODE_SIZE;
        ramrsbd.buffer[byte0] ^= 0xff;
        ramrsbd.buffer[byte1] ^= 0xff;

        // read data
        cfg_.read(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

        // error correction should repair the bit
        for (lfs_off_t i = 0; i < READ_SIZE; i++) {
            LFS_ASSERT(buffer[i] == 'a' + (i % 26));
        }

        // undo the byte flips
        ramrsbd.buffer[byte0] ^= 0xff;
        ramrsbd.buffer[byte1] ^= 0xff;
    }

    ramrsbd_destroy(&cfg_) => 0;
'''

# test random n/2 bit errors
[cases.test_correction_nd2_bits_prng]
defines.SEED = 'range(10)'
defines.N = 1000
code = '''
    ramrsbd_t ramrsbd;
    struct lfs_config cfg_ = *cfg;
    cfg_.context = &ramrsbd;
    cfg_.read  = ramrsbd_read;
    cfg_.prog  = ramrsbd_prog;
    cfg_.erase = ramrsbd_erase;
    cfg_.sync  = ramrsbd_sync;
    struct ramrsbd_config ramrsbdcfg = {
        .code_size = CODE_SIZE,
        .ecc_size = ECC_SIZE,
        .erase_size = ERASE_SIZE,
        .erase_count = ERASE_COUNT,
    };
    ramrsbd_create(&cfg_, &ramrsbdcfg) => 0;

    uint8_t buffer[READ_SIZE];

    // write data
    cfg_.erase(&cfg_, 0) => 0;
    for (lfs_off_t i = 0; i < READ_SIZE; i++) {
        buffer[i] = 'a' + (i % 26);
    }
    cfg_.prog(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

    // try flipping random sets of bits
    uint32_t prng = SEED;
    for (lfs_size_t i = 0; i < N; i++) {
        uint32_t bprng = TEST_PRNG(&prng);
        uint32_t bprng_ = bprng;
        for (lfs_size_t j = 0; j < ECC_SIZE/2; j++) {
            lfs_size_t bit = TEST_PRNG(&bprng_) % (8*CODE_SIZE);
            ramrsbd.buffer[bit/8] ^= 1 << (bit%8);
        }

        // read data
        cfg_.read(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

        // error correction should repair the bit
        for (lfs_off_t i = 0; i < READ_SIZE; i++) {
            LFS_ASSERT(buffer[i] == 'a' + (i % 26));
        }

        // undo the bit flips
        bprng_ = bprng;
        for (lfs_size_t j = 0; j < ECC_SIZE/2; j++) {
            lfs_size_t bit = TEST_PRNG(&bprng_) % (8*CODE_SIZE);
            ramrsbd.buffer[bit/8] ^= 1 << (bit%8);
        }
    }

    ramrsbd_destroy(&cfg_) => 0;
'''

# test random n/2 byte errors
[cases.test_correction_nd2_bytes_prng]
defines.SEED = 'range(10)'
defines.N = 1000
code = '''
    ramrsbd_t ramrsbd;
    struct lfs_config cfg_ = *cfg;
    cfg_.context = &ramrsbd;
    cfg_.read  = ramrsbd_read;
    cfg_.prog  = ramrsbd_prog;
    cfg_.erase = ramrsbd_erase;
    cfg_.sync  = ramrsbd_sync;
    struct ramrsbd_config ramrsbdcfg = {
        .code_size = CODE_SIZE,
        .ecc_size = ECC_SIZE,
        .erase_size = ERASE_SIZE,
        .erase_count = ERASE_COUNT,
    };
    ramrsbd_create(&cfg_, &ramrsbdcfg) => 0;

    uint8_t buffer[READ_SIZE];

    // write data
    cfg_.erase(&cfg_, 0) => 0;
    for (lfs_off_t i = 0; i < READ_SIZE; i++) {
        buffer[i] = 'a' + (i % 26);
    }
    cfg_.prog(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

    // try flipping random sets of bytes
    uint32_t prng = SEED;
    for (lfs_size_t i = 0; i < N; i++) {
        uint32_t bprng = TEST_PRNG(&prng);
        uint32_t bprng_ = bprng;
        for (lfs_size_t j = 0; j < ECC_SIZE/2; j++) {
            lfs_size_t bit = TEST_PRNG(&bprng_) % (8*CODE_SIZE);
            ramrsbd.buffer[bit/8] ^= 1 << (bit%8);
        }

        // read data
        cfg_.read(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

        // error correction should repair the bit
        for (lfs_off_t i = 0; i < READ_SIZE; i++) {
            LFS_ASSERT(buffer[i] == 'a' + (i % 26));
        }

        // undo the byte flips
        bprng_ = bprng;
        for (lfs_size_t j = 0; j < ECC_SIZE/2; j++) {
            lfs_size_t bit = TEST_PRNG(&bprng_) % (8*CODE_SIZE);
            ramrsbd.buffer[bit/8] ^= 1 << (bit%8);
        }
    }

    ramrsbd_destroy(&cfg_) => 0;
'''

