# Test error correction
#

code = '''
#include "ramcrc32bd.h"
'''

defines.CODE_SIZE = [16, 256]
defines.ERASE_SIZE = 4096

defines.READ_SIZE = 'CODE_SIZE - sizeof(uint32_t)'
defines.PROG_SIZE = 'CODE_SIZE - sizeof(uint32_t)'
defines.BLOCK_SIZE = 'ERASE_SIZE - ((ERASE_SIZE/CODE_SIZE)*sizeof(uint32_t))'

# test all 1-bit errors
[cases.test_correction_1_bit_all]
code = '''
    ramcrc32bd_t ramcrc32bd;
    struct lfs_config cfg_ = *cfg;
    cfg_.context = &ramcrc32bd;
    cfg_.read  = ramcrc32bd_read;
    cfg_.prog  = ramcrc32bd_prog;
    cfg_.erase = ramcrc32bd_erase;
    cfg_.sync  = ramcrc32bd_sync;
    struct ramcrc32bd_config ramcrc32bdcfg = {
        .code_size = READ_SIZE+sizeof(uint32_t),
        .erase_size = ERASE_SIZE,
        .erase_count = ERASE_COUNT,
    };
    ramcrc32bd_create(&cfg_, &ramcrc32bdcfg) => 0;

    uint8_t buffer[READ_SIZE];

    // write data
    cfg_.erase(&cfg_, 0) => 0;
    for (lfs_off_t i = 0; i < READ_SIZE; i++) {
        buffer[i] = 'a' + (i % 26);
    }
    cfg_.prog(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

    // try flipping each bit
    for (lfs_off_t i = 0; i < 8*CODE_SIZE; i++) {
        ramcrc32bd.buffer[i/8] ^= 1 << (i%8);

        // read data
        cfg_.read(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

        // error correction should repair the bit
        for (lfs_off_t i = 0; i < READ_SIZE; i++) {
            LFS_ASSERT(buffer[i] == 'a' + (i % 26));
        }

        // undo the bit flip
        ramcrc32bd.buffer[i/8] ^= 1 << (i%8);
    }

    ramcrc32bd_destroy(&cfg_) => 0;
'''

# test random 2 bit errors
[cases.test_correction_2_bits_prng]
defines.SEED = 42
defines.N = 10000
code = '''
    ramcrc32bd_t ramcrc32bd;
    struct lfs_config cfg_ = *cfg;
    cfg_.context = &ramcrc32bd;
    cfg_.read  = ramcrc32bd_read;
    cfg_.prog  = ramcrc32bd_prog;
    cfg_.erase = ramcrc32bd_erase;
    cfg_.sync  = ramcrc32bd_sync;
    struct ramcrc32bd_config ramcrc32bdcfg = {
        .code_size = READ_SIZE+sizeof(uint32_t),
        .erase_size = ERASE_SIZE,
        .erase_count = ERASE_COUNT,
    };
    ramcrc32bd_create(&cfg_, &ramcrc32bdcfg) => 0;

    uint8_t buffer[READ_SIZE];

    // write data
    cfg_.erase(&cfg_, 0) => 0;
    for (lfs_off_t i = 0; i < READ_SIZE; i++) {
        buffer[i] = 'a' + (i % 26);
    }
    cfg_.prog(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

    // try flipping random sets of bits
    uint32_t prng = SEED;
    for (lfs_size_t i = 0; i < N; i++) {
        lfs_size_t bit0 = TEST_PRNG(&prng) % (8*CODE_SIZE);
        lfs_size_t bit1 = TEST_PRNG(&prng) % (8*CODE_SIZE);
        ramcrc32bd.buffer[bit0/8] ^= 1 << (bit0%8);
        ramcrc32bd.buffer[bit1/8] ^= 1 << (bit1%8);

        // read data
        cfg_.read(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

        // error correction should repair the bit
        for (lfs_off_t i = 0; i < READ_SIZE; i++) {
            LFS_ASSERT(buffer[i] == 'a' + (i % 26));
        }

        // undo the bit flips
        ramcrc32bd.buffer[bit0/8] ^= 1 << (bit0%8);
        ramcrc32bd.buffer[bit1/8] ^= 1 << (bit1%8);
    }

    ramcrc32bd_destroy(&cfg_) => 0;
'''

# test random 3 bit errors
[cases.test_correction_3_bits_prng]
defines.SEED = 42
defines.N = 10000
# this only works up to ~16 byte code words
if = 'READ_SIZE <= 16'
code = '''
    ramcrc32bd_t ramcrc32bd;
    struct lfs_config cfg_ = *cfg;
    cfg_.context = &ramcrc32bd;
    cfg_.read  = ramcrc32bd_read;
    cfg_.prog  = ramcrc32bd_prog;
    cfg_.erase = ramcrc32bd_erase;
    cfg_.sync  = ramcrc32bd_sync;
    struct ramcrc32bd_config ramcrc32bdcfg = {
        .code_size = READ_SIZE+sizeof(uint32_t),
        .erase_size = ERASE_SIZE,
        .erase_count = ERASE_COUNT,
    };
    ramcrc32bd_create(&cfg_, &ramcrc32bdcfg) => 0;

    uint8_t buffer[READ_SIZE];

    // write data
    cfg_.erase(&cfg_, 0) => 0;
    for (lfs_off_t i = 0; i < READ_SIZE; i++) {
        buffer[i] = 'a' + (i % 26);
    }
    cfg_.prog(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

    // try flipping random sets of bits
    uint32_t prng = SEED;
    for (lfs_size_t i = 0; i < N; i++) {
        lfs_size_t bit0 = TEST_PRNG(&prng) % (8*CODE_SIZE);
        lfs_size_t bit1 = TEST_PRNG(&prng) % (8*CODE_SIZE);
        lfs_size_t bit2 = TEST_PRNG(&prng) % (8*CODE_SIZE);
        ramcrc32bd.buffer[bit0/8] ^= 1 << (bit0%8);
        ramcrc32bd.buffer[bit1/8] ^= 1 << (bit1%8);
        ramcrc32bd.buffer[bit2/8] ^= 1 << (bit2%8);

        // read data
        cfg_.read(&cfg_, 0, 0, buffer, READ_SIZE) => 0;

        // error correction should repair the bit
        for (lfs_off_t i = 0; i < READ_SIZE; i++) {
            LFS_ASSERT(buffer[i] == 'a' + (i % 26));
        }

        // undo the bit flips
        ramcrc32bd.buffer[bit0/8] ^= 1 << (bit0%8);
        ramcrc32bd.buffer[bit1/8] ^= 1 << (bit1%8);
        ramcrc32bd.buffer[bit2/8] ^= 1 << (bit2%8);
    }

    ramcrc32bd_destroy(&cfg_) => 0;
'''

